Start loging INFO
|*|21 May 13:59:58|*|<GLOBAL>|*|Modem receive command Hello|*|

|*|21 May 13:59:58|*|<GLOBAL>|*|Modem form answer Hi|*|

|*|21 May 14:0:2|*|<GLOBAL>|*|Modem receive command ATD+1#
|*|

|*|21 May 14:0:2|*|<GLOBAL>|*|Try open connection|*|

|*|21 May 14:0:2|*|<GLOBAL>|*|All function has canceled before create new connection|*|

|*|21 May 14:0:8|*|<GLOBAL>|*|Modem receive command Hello|*|

|*|21 May 14:0:11|*|<GLOBAL>|*|Modem receive command Hello|*|

|*|21 May 14:0:12|*|<GLOBAL>|*|Modem receive command Hello|*|

|*|21 May 14:1:7|*|<GLOBAL>|*|Modem receive command Hello|*|

|*|21 May 14:1:8|*|<GLOBAL>|*|Modem receive command Hello|*|

|*|21 May 14:1:8|*|<GLOBAL>|*|Modem receive command Hello|*|

|*|21 May 14:1:9|*|<GLOBAL>|*|Modem receive command Hello|*|

|*|21 May 14:1:9|*|<GLOBAL>|*|Modem receive command Hello|*|

|*|21 May 14:1:9|*|<GLOBAL>|*|Modem receive command Hello|*|

|*|21 May 14:1:9|*|<GLOBAL>|*|Modem receive command Hello|*|

|*|21 May 14:1:9|*|<GLOBAL>|*|Modem receive command Hello|*|

|*|21 May 14:1:9|*|<GLOBAL>|*|Modem receive command Hello|*|

|*|21 May 14:1:10|*|<GLOBAL>|*|Modem receive command Hello|*|

|*|21 May 14:1:10|*|<GLOBAL>|*|Modem receive command Hello|*|

|*|21 May 14:1:10|*|<GLOBAL>|*|Modem receive command Hello|*|

|*|21 May 14:1:16|*|<GLOBAL>|*|Modem receive command Hello
|*|

|*|21 May 14:1:16|*|<GLOBAL>|*|Command not found and session is started, so modem form empty string answer|*|

|*|21 May 14:1:20|*|<GLOBAL>|*|Modem receive command Hello
|*|

|*|21 May 14:1:20|*|<GLOBAL>|*|Command not found and session is started, so modem form empty string answer|*|

|*|21 May 14:1:38|*|<GLOBAL>|*|Modem receive command +++
|*|

|*|21 May 14:1:38|*|<GLOBAL>|*|Close connection, delete client delegate|*|

|*|21 May 14:1:38|*|<GLOBAL>|*|Delete TCP client|*|

|*|21 May 14:1:57|*|<GLOBAL>|*|Modem receive command Hello
|*|

|*|21 May 14:1:57|*|<GLOBAL>|*|Command not found, so modem form default answer OK
|*|

|*|21 May 14:2:0|*|<GLOBAL>|*|Modem receive command Hello
|*|

|*|21 May 14:2:0|*|<GLOBAL>|*|Command not found, so modem form default answer OK
|*|

|*|21 May 14:2:4|*|<GLOBAL>|*|Modem receive command Hello|*|

|*|21 May 14:2:4|*|<GLOBAL>|*|Modem form answer Hi|*|

|*|21 May 14:2:8|*|<GLOBAL>|*|Modem receive command ATD+1#
|*|

|*|21 May 14:2:8|*|<GLOBAL>|*|Try open connection|*|

|*|21 May 14:2:8|*|<GLOBAL>|*|All function has canceled before create new connection|*|

|*|21 May 14:2:11|*|<GLOBAL>|*|Modem receive command Hello
|*|

|*|21 May 14:2:11|*|<GLOBAL>|*|Command not found and session is started, so modem form empty string answer|*|

|*|21 May 14:2:33|*|<GLOBAL>|*|Modem receive command +++
|*|

|*|21 May 14:2:34|*|<GLOBAL>|*|Close connection, delete client delegate|*|

|*|21 May 14:2:34|*|<GLOBAL>|*|Delete TCP client|*|

Start loging INFO
|*|21 May 15:26:46|*|<GLOBAL>|*|Modem receive command Hello|*|

|*|21 May 15:26:46|*|<GLOBAL>|*|Modem form answer Hi|*|

|*|21 May 15:26:57|*|<GLOBAL>|*|Modem receive command ATD+1#
|*|

|*|21 May 15:26:57|*|<GLOBAL>|*|Try open connection|*|

|*|21 May 15:26:57|*|<GLOBAL>|*|All function has canceled before create new connection|*|

|*|21 May 15:26:57|*|<GLOBAL>|*|Receive new messages $V13=CONNECT OK;
. And try decode it|*|

|*|21 May 15:26:57|*|<GLOBAL>|*|Result messages: V13=CONNECT OK;|*|

|*|21 May 15:27:3|*|<GLOBAL>|*|Modem receive command Hello|*|

|*|21 May 15:27:3|*|<GLOBAL>|*|Form result message: #Hello
|*|

|*|21 May 15:27:10|*|<GLOBAL>|*|Receive new messages Hee1lll
. And try decode it|*|

|*|21 May 15:27:10|*|<GLOBAL>|*|Result messages: ee1lll|*|

|*|21 May 15:27:31|*|<GLOBAL>|*|Receive new messages #Hello
. And try decode it|*|

|*|21 May 15:27:31|*|<GLOBAL>|*|Result messages: Hello|*|

|*|21 May 15:27:41|*|<GLOBAL>|*|Receive new messages #How are you
. And try decode it|*|

|*|21 May 15:27:41|*|<GLOBAL>|*|Result messages: How are you|*|

|*|21 May 15:27:50|*|<GLOBAL>|*|Receive new messages  jaskjdfhaskdjfkqawdq12345000000111
. And try decode it|*|

|*|21 May 15:27:50|*|<GLOBAL>|*|Result messages: jaskjdfhaskdjfkqawdq12345000000111|*|

|*|21 May 15:28:1|*|<GLOBAL>|*|Modem receive command Hello|*|

|*|21 May 15:28:1|*|<GLOBAL>|*|Form result message: #Hello
|*|

|*|21 May 15:28:54|*|<GLOBAL>|*|Modem receive command #include <vector>|*|

|*|21 May 15:28:54|*|<GLOBAL>|*|Command not found and session is started, so modem form empty string answer|*|

|*|21 May 15:28:54|*|<GLOBAL>|*|Form result message: ##include <vector>
|*|

|*|21 May 15:29:12|*|<GLOBAL>|*|Modem receive command #include <vector>
#include <iostream>
 
struct B {
    int m = 0;
    void hello() const {
        std::cout << "Hello world, this is B!\n";
    }
};
struct D : B {
    void hello() const {
        std::cout << "Hello world, this is D!\n";
    }
};
 
enum class E { ONE = 1, TWO, THREE };
enum EU { ONE = 1, TWO, THREE };
 
int main()
{
    // 1: initializing conversion
    int n = static_cast<int>(3.14); 
    std::cout << "n = " << n << '\n';
    std::vector<int> v = static_cast<std::vector<int>>(10);
    std::cout << "v.size() = " << v.size() << '\n';
 
    // 2: static downcast
    D d;
    B& br = d; // upcast via implicit conversion
    br.hello();
    D& another_d = static_cast<D&>(br); // downcast
    another_d.hello();
 
    // 3: lvalue to xvalue
    std::vector<int> v2 = static_cast<std::vector<int>&&>(v);
    std::cout << "after move, v.size() = " << v.size() << '\n';
 
    // 4: discarded-value expression
    static_cast<void>(v2.size());
 
    // 5. inverse of implicit conversion
    void* nv = &n;
    int* ni = static_cast<int*>(nv);
    std::cout << "*ni = " << *ni << '\n';
 
    // 6. array-to-pointer followed by upcast
    D a[10];
    B* dp = static_cast<B*>(a);
 
    // 7. scoped enum to int or float
    E e = E::ONE;
    int one = static_cast<int>(e);
    std::cout << one << '\n';
 
    // 8. int to enum, enum to another enum
    E e2 = static_cast<E>(one);
    EU eu = static_cast<EU>(e2);
 
    // 9. pointer to member upcast
    int D::*pm = &D::m;
    std::cout << br.*static_cast<int B::*>(pm) << '\n';
 
    // 10. void* to any type
    void* voidp = &e;
    std::vector<int>* p = static_cast<std::vector<int>*>(voidp);
}|*|

|*|21 May 15:29:12|*|<GLOBAL>|*|Command not found and session is started, so modem form empty string answer|*|

|*|21 May 15:29:12|*|<GLOBAL>|*|Form result message: ##include <vector>
#include <iostream>
 
struct B {
    int m = 0;
    void hello() const {
        std::cout << "Hello world, this is B!\n";
    }
};
struct D : B {
    void hello() const {
        std::cout << "Hello world, this is D!\n";
    }
};
 
enum class E { ONE = 1, TWO, THREE };
enum EU { ONE = 1, TWO, THREE };
 
int main()
{
    // 1: initializing conversion
    int n = static_cast<int>(3.14); 
    std::cout << "n = " << n << '\n';
    std::vector<int> v = static_cast<std::vector<int>>(10);
    std::cout << "v.size() = " << v.size() << '\n';
 
    // 2: static downcast
    D d;
    B& br = d; // upcast via implicit conversion
    br.hello();
    D& another_d = static_cast<D&>(br); // downcast
    another_d.hello();
 
    // 3: lvalue to xvalue
    std::vector<int> v2 = static_cast<std::vector<int>&&>(v);
    std::cout << "after move, v.size() = " << v.size() << '\n';
 
    // 4: discarded-value expression
    static_cast<void>(v2.size());
 
    // 5. inverse of implicit conversion
    void* nv = &n;
    int* ni = static_cast<int*>(nv);
    std::cout << "*ni = " << *ni << '\n';
 
    // 6. array-to-pointer followed by upcast
    D a[10];
    B* dp = static_cast<B*>(a);
 
    // 7. scoped enum to int or float
    E e = E::ONE;
    int one = static_cast<int>(e);
    std::cout << one << '\n';
 
    // 8. int to enum, enum to another enum
    E e2 = static_cast<E>(one);
    EU eu = static_cast<EU>(e2);
 
    // 9. pointer to member upcast
    int D::*pm = &D::m;
    std::cout << br.*static_cast<int B::*>(pm) << '\n';
 
    // 10. void* to any type
    void* voidp = &e;
    std::vector<int>* p = static_cast<std::vector<int>*>(voidp);
}
|*|

|*|21 May 15:29:58|*|<GLOBAL>|*|Modem receive command ATD+1#
|*|

|*|21 May 15:29:58|*|<GLOBAL>|*|Command not found and session is started, so modem form empty string answer|*|

|*|21 May 15:29:58|*|<GLOBAL>|*|Form result message: #ATD+1#

|*|

|*|21 May 15:29:58|*|<GLOBAL>|*|Receive new messages $V11=Unsupported command;
. And try decode it|*|

|*|21 May 15:29:58|*|<GLOBAL>|*|Result messages: V11=Unsupported command;|*|

|*|21 May 15:30:50|*|<GLOBAL>|*|Modem receive command +++
|*|

|*|21 May 15:30:50|*|<GLOBAL>|*|Close connection, delete client delegate|*|

|*|21 May 15:30:50|*|<GLOBAL>|*|Delete TCP client|*|

|*|21 May 15:30:59|*|<GLOBAL>|*|Modem receive command ATD+1#
|*|

|*|21 May 15:30:59|*|<GLOBAL>|*|Try open connection|*|

|*|21 May 15:30:59|*|<GLOBAL>|*|All function has canceled before create new connection|*|

|*|21 May 15:30:59|*|<GLOBAL>|*|Receive new messages $V13=CONNECT OK;
. And try decode it|*|

|*|21 May 15:30:59|*|<GLOBAL>|*|Result messages: V13=CONNECT OK;|*|

|*|21 May 15:31:7|*|<GLOBAL>|*|Modem receive command include <vector>|*|

|*|21 May 15:31:7|*|<GLOBAL>|*|Command not found and session is started, so modem form empty string answer|*|

|*|21 May 15:31:7|*|<GLOBAL>|*|Form result message: #include <vector>
|*|

|*|21 May 15:31:22|*|<GLOBAL>|*|Modem receive command include <vector>|*|

|*|21 May 15:31:22|*|<GLOBAL>|*|Command not found and session is started, so modem form empty string answer|*|

|*|21 May 15:31:22|*|<GLOBAL>|*|Form result message: #include <vector>
|*|

|*|21 May 15:31:22|*|<GLOBAL>|*|Modem receive command include <vector>|*|

|*|21 May 15:31:22|*|<GLOBAL>|*|Command not found and session is started, so modem form empty string answer|*|

|*|21 May 15:31:23|*|<GLOBAL>|*|Form result message: #include <vector>
|*|

|*|21 May 15:31:23|*|<GLOBAL>|*|Modem receive command include <vector>|*|

|*|21 May 15:31:23|*|<GLOBAL>|*|Command not found and session is started, so modem form empty string answer|*|

|*|21 May 15:31:23|*|<GLOBAL>|*|Form result message: #include <vector>
|*|

|*|21 May 15:31:23|*|<GLOBAL>|*|Modem receive command include <vector>|*|

|*|21 May 15:31:23|*|<GLOBAL>|*|Command not found and session is started, so modem form empty string answer|*|

|*|21 May 15:31:23|*|<GLOBAL>|*|Form result message: #include <vector>
|*|

|*|21 May 15:31:23|*|<GLOBAL>|*|Modem receive command include <vector>|*|

|*|21 May 15:31:23|*|<GLOBAL>|*|Command not found and session is started, so modem form empty string answer|*|

|*|21 May 15:31:23|*|<GLOBAL>|*|Form result message: #include <vector>
|*|

|*|21 May 15:31:24|*|<GLOBAL>|*|Modem receive command include <vector>|*|

|*|21 May 15:31:24|*|<GLOBAL>|*|Command not found and session is started, so modem form empty string answer|*|

|*|21 May 15:31:24|*|<GLOBAL>|*|Form result message: #include <vector>
|*|

|*|21 May 15:31:24|*|<GLOBAL>|*|Modem receive command include <vector>|*|

|*|21 May 15:31:24|*|<GLOBAL>|*|Command not found and session is started, so modem form empty string answer|*|

|*|21 May 15:31:24|*|<GLOBAL>|*|Form result message: #include <vector>
|*|

|*|21 May 15:31:24|*|<GLOBAL>|*|Modem receive command include <vector>|*|

|*|21 May 15:31:24|*|<GLOBAL>|*|Command not found and session is started, so modem form empty string answer|*|

|*|21 May 15:31:24|*|<GLOBAL>|*|Form result message: #include <vector>
|*|

|*|21 May 15:31:24|*|<GLOBAL>|*|Modem receive command include <vector>|*|

|*|21 May 15:31:24|*|<GLOBAL>|*|Command not found and session is started, so modem form empty string answer|*|

|*|21 May 15:31:24|*|<GLOBAL>|*|Form result message: #include <vector>
|*|

|*|21 May 15:31:24|*|<GLOBAL>|*|Modem receive command include <vector>|*|

|*|21 May 15:31:24|*|<GLOBAL>|*|Command not found and session is started, so modem form empty string answer|*|

|*|21 May 15:31:24|*|<GLOBAL>|*|Form result message: #include <vector>
|*|

|*|21 May 15:31:25|*|<GLOBAL>|*|Modem receive command include <vector>|*|

|*|21 May 15:31:25|*|<GLOBAL>|*|Command not found and session is started, so modem form empty string answer|*|

|*|21 May 15:31:25|*|<GLOBAL>|*|Form result message: #include <vector>
|*|

|*|21 May 15:31:25|*|<GLOBAL>|*|Modem receive command include <vector>|*|

|*|21 May 15:31:25|*|<GLOBAL>|*|Command not found and session is started, so modem form empty string answer|*|

|*|21 May 15:31:25|*|<GLOBAL>|*|Form result message: #include <vector>
|*|

|*|21 May 15:31:30|*|<GLOBAL>|*|Receive new messages #Hello
. And try decode it|*|

|*|21 May 15:31:30|*|<GLOBAL>|*|Result messages: Hello|*|

|*|21 May 15:31:34|*|<GLOBAL>|*|Receive new messages #include <vector> #include <iostream>   struct B {     int m = 0;     void hello() const {         std::cout << "Hello world, this is B!\n";     } }; struct D : B {     void hello() const {         std::cout << "Hello world, this is D!\n";     } };   enum class E { ONE = 1, TWO, THREE }; enum EU { ONE = 1, TWO, THREE };   int main() {     // 1: initializing conversion     int n = static_cast<int>(3.14);      std::cout << "n = " << n << '\n';     std::vector<int> v = static_cast<std::vector<int>>(10);     std::cout << "v.size() = " << v.size() << '\n';       // 2: static downcast     D d;     B& br = d; // upcast via implicit conversion     br.hello();     D& another_d = static_cast<D&>(br); // downcast     another_d.hello();       // 3: lvalue to xvalue     std::vector<int> v2 = static_cast<std::vector<int>&&>(v);     std::cout << "after move, v.size() = " << v.size() << '\n';       // 4: discarded-value expression     static_cast<void>(v2.size());       // 5. inverse of implicit conversion     void* nv = &n;     int* ni = static_cast<int*>(nv);     std::cout << "*ni = " << *ni << '\n';       // 6. array-to-pointer followed by upcast     D a[10];     B* dp = static_cast<B*>(a);       // 7. scoped enum to int or float     E e = E::ONE;     int one = static_cast<int>(e);     std::cout << one << '\n';       // 8. int to enum, enum to another enum     E e2 = static_cast<E>(one);     EU eu = static_cast<EU>(e2);       // 9. pointer to member upcast     int D::*pm = &D::m;     std::cout << br.*static_cast<int B::*>(pm) << '\n';       // 10. void* to any type     void* voidp = &e;     std::vector<int>* p = static_cast<std::vector<int>*>(voidp); }
. And try decode it|*|

|*|21 May 15:31:34|*|<GLOBAL>|*|Result messages: include <vector> #include <iostream>   struct B {     int m = 0;     void hello() const {         std::cout << "Hello world, this is B!\n";     } }; struct D : B {     void hello() const {         std::cout << "Hello world, this is D!\n";     } };   enum class E { ONE = 1, TWO, THREE }; enum EU { ONE = 1, TWO, THREE };   int main() {     // 1: initializing conversion     int n = static_cast<int>(3.14);      std::cout << "n = " << n << '\n';     std::vector<int> v = static_cast<std::vector<int>>(10);     std::cout << "v.size() = " << v.size() << '\n';       // 2: static downcast     D d;     B& br = d; // upcast via implicit conversion     br.hello();     D& another_d = static_cast<D&>(br); // downcast     another_d.hello();       // 3: lvalue to xvalue     std::vector<int> v2 = static_cast<std::vector<int>&&>(v);     std::cout << "after move, v.size() = " << v.size() << '\n';       // 4: discarded-value expression     static_cast<void>(v2.size());       // 5. inverse of implicit conversion     void* nv = &n;     int* ni = static_cast<int*>(nv);     std::cout << "*ni = " << *ni << '\n';       // 6. array-to-pointer followed by upcast     D a[10];     B* dp = static_cast<B*>(a);       // 7. scoped enum to int or float     E e = E::ONE;     int one = static_cast<int>(e);     std::cout << one << '\n';       // 8. int to enum, enum to another enum     E e2 = static_cast<E>(one);     EU eu = static_cast<EU>(e2);       // 9. pointer to member upcast     int D::*pm = &D::m;     std::cout << br.*static_cast<int B::*>(pm) << '\n';       // 10. void* to any type     void* voidp = &e;     std::vector<int>* p = static_cast<std::vector<int>*>(voidp); }|*|

|*|21 May 15:32:9|*|<GLOBAL>|*|Modem receive command include <vector>|*|

|*|21 May 15:32:9|*|<GLOBAL>|*|Command not found and session is started, so modem form empty string answer|*|

|*|21 May 15:32:9|*|<GLOBAL>|*|Form result message: #include <vector>
|*|

|*|21 May 15:32:11|*|<GLOBAL>|*|Modem receive command +++
|*|

|*|21 May 15:32:11|*|<GLOBAL>|*|Close connection, delete client delegate|*|

|*|21 May 15:32:11|*|<GLOBAL>|*|Delete TCP client|*|

Start loging INFO
|*|21 May 16:10:33|*|<GLOBAL>|*|Modem receive command How are you?|*|

|*|21 May 16:10:33|*|<GLOBAL>|*|Modem form answer I am fine thanks|*|

|*|21 May 16:10:35|*|<GLOBAL>|*|Modem receive command +++
|*|

|*|21 May 16:10:40|*|<GLOBAL>|*|Modem receive command ATD+1#
|*|

|*|21 May 16:10:40|*|<GLOBAL>|*|Try open connection|*|

|*|21 May 16:10:40|*|<GLOBAL>|*|All function has canceled before create new connection|*|

|*|21 May 16:10:40|*|<GLOBAL>|*|Receive new messages $V13=CONNECT OK;
. And try decode it|*|

|*|21 May 16:10:49|*|<GLOBAL>|*|Modem receive command How are you?|*|

|*|21 May 16:10:49|*|<GLOBAL>|*|Form result message: #SG93IGFyZSB5b3U/
|*|

|*|21 May 16:10:51|*|<GLOBAL>|*|Modem receive command How are you?|*|

|*|21 May 16:10:51|*|<GLOBAL>|*|Form result message: #SG93IGFyZSB5b3U/
|*|

|*|21 May 16:10:59|*|<GLOBAL>|*|Receive new messages SGVsbG8N
. And try decode it|*|

|*|21 May 16:11:12|*|<GLOBAL>|*|Modem receive command How are you?|*|

|*|21 May 16:11:12|*|<GLOBAL>|*|Form result message: #SG93IGFyZSB5b3U/
|*|

|*|21 May 16:11:18|*|<GLOBAL>|*|Receive new messages SGVsbG8N
. And try decode it|*|

|*|21 May 16:11:32|*|<GLOBAL>|*|Modem receive command +++
|*|

|*|21 May 16:11:33|*|<GLOBAL>|*|Close connection, delete client delegate|*|

|*|21 May 16:11:33|*|<GLOBAL>|*|Delete TCP client|*|

Start loging INFO
|*|21 May 18:4:33|*|<GLOBAL>|*|Modem receive command atd+1#
|*|

|*|21 May 18:4:33|*|<GLOBAL>|*|Try open connection|*|

|*|21 May 18:4:33|*|<GLOBAL>|*|All function has canceled before create new connection|*|

|*|21 May 18:4:33|*|<GLOBAL>|*|Receive new messages $V23=CONNECT OK;
. And try decode it|*|

|*|21 May 18:4:38|*|<GLOBAL>|*|Modem receive command 1234|*|

|*|21 May 18:4:38|*|<GLOBAL>|*|Command not found and session is started, so modem form empty string answer|*|

|*|21 May 18:4:38|*|<GLOBAL>|*|Form result message: #MTIzNA==
|*|

|*|21 May 18:4:43|*|<GLOBAL>|*|Receive new messages #MTIzNA0=
. And try decode it|*|

|*|21 May 18:4:58|*|<GLOBAL>|*|Receive new messages #MTIzNA0=
. And try decode it|*|

|*|21 May 18:5:3|*|<GLOBAL>|*|Receive new messages #Nzg5NDUN
. And try decode it|*|

|*|21 May 18:5:7|*|<GLOBAL>|*|Receive new messages #MTIzNDU2DQ==
. And try decode it|*|

|*|21 May 18:5:19|*|<GLOBAL>|*|Modem receive command atd+1#
|*|

|*|21 May 18:5:22|*|<GLOBAL>|*|Command not found and session is started, so modem form empty string answer|*|

|*|21 May 18:5:22|*|<GLOBAL>|*|Form result message: #YXRkKzEjDQo=
|*|

|*|21 May 18:5:22|*|<GLOBAL>|*|Receive new messages $V21=Unsupported command;
. And try decode it|*|

|*|21 May 18:5:22|*|<GLOBAL>|*|Undefine # in start message $V21=Unsupported command;
|*|

|*|21 May 18:5:22|*|<GLOBAL>|*|Modem receive command atd+1#
atd+1#
atd+1#
atd+1#
atd+1#
|*|

|*|21 May 18:5:22|*|<GLOBAL>|*|Command not found and session is started, so modem form empty string answer|*|

|*|21 May 18:5:22|*|<GLOBAL>|*|Form result message: #YXRkKzEjDQphdGQrMSMNCmF0ZCsxIw0KYXRkKzEjDQphdGQrMSMNCg==
|*|

|*|21 May 18:5:22|*|<GLOBAL>|*|Receive new messages $V21=Unsupported command;
. And try decode it|*|

|*|21 May 18:5:22|*|<GLOBAL>|*|Undefine # in start message $V21=Unsupported command;
|*|

|*|21 May 18:7:15|*|<GLOBAL>|*|Modem receive command 1234|*|

|*|21 May 18:7:15|*|<GLOBAL>|*|Command not found and session is started, so modem form empty string answer|*|

|*|21 May 18:7:15|*|<GLOBAL>|*|Form result message: #MTIzNA==
|*|

|*|21 May 18:7:15|*|<GLOBAL>|*|All function has canceled before create new connection|*|

|*|21 May 18:7:15|*|<GLOBAL>|*|Receive new messages $V21=Can not create connection whith abonnent 1;
. And try decode it|*|

|*|21 May 18:7:15|*|<GLOBAL>|*|Undefine # in start message $V21=Can not create connection whith abonnent 1;
|*|

|*|21 May 18:7:45|*|<GLOBAL>|*|Modem receive command atd+2#
|*|

|*|21 May 18:7:45|*|<GLOBAL>|*|Command not found and session is started, so modem form empty string answer|*|

|*|21 May 18:7:45|*|<GLOBAL>|*|Form result message: #YXRkKzIjDQo=
|*|

|*|21 May 18:7:46|*|<GLOBAL>|*|Receive new messages $V21=Unsupported command;
. And try decode it|*|

|*|21 May 18:7:46|*|<GLOBAL>|*|Undefine # in start message $V21=Unsupported command;
|*|

|*|21 May 18:8:7|*|<GLOBAL>|*|Modem receive command +++
|*|

|*|21 May 18:8:7|*|<GLOBAL>|*|Close connection, delete client delegate|*|

|*|21 May 18:8:7|*|<GLOBAL>|*|Delete TCP client|*|

|*|21 May 18:8:12|*|<GLOBAL>|*|Modem receive command Atd+2#
|*|

|*|21 May 18:8:12|*|<GLOBAL>|*|Try open connection|*|

|*|21 May 18:8:12|*|<GLOBAL>|*|All function has canceled before create new connection|*|

|*|21 May 18:8:12|*|<GLOBAL>|*|Receive new messages $V23=CONNECT OK;
. And try decode it|*|

|*|21 May 18:8:15|*|<GLOBAL>|*|Modem receive command 1234|*|

|*|21 May 18:8:15|*|<GLOBAL>|*|Command not found and session is started, so modem form empty string answer|*|

|*|21 May 18:8:15|*|<GLOBAL>|*|Form result message: #MTIzNA==
|*|

|*|21 May 18:8:16|*|<GLOBAL>|*|Modem receive command 1234|*|

|*|21 May 18:8:16|*|<GLOBAL>|*|Command not found and session is started, so modem form empty string answer|*|

|*|21 May 18:8:16|*|<GLOBAL>|*|Form result message: #MTIzNA==
|*|

|*|21 May 18:8:17|*|<GLOBAL>|*|Modem receive command 1234|*|

|*|21 May 18:8:17|*|<GLOBAL>|*|Command not found and session is started, so modem form empty string answer|*|

|*|21 May 18:8:17|*|<GLOBAL>|*|Form result message: #MTIzNA==
|*|

|*|21 May 18:8:22|*|<GLOBAL>|*|Receive new messages #MTIzNA0=
. And try decode it|*|

|*|21 May 18:8:25|*|<GLOBAL>|*|Receive new messages #DQ==
. And try decode it|*|

|*|21 May 18:8:31|*|<GLOBAL>|*|Receive new messages #MTIzNA0=
. And try decode it|*|

|*|21 May 18:8:44|*|<GLOBAL>|*|Receive new messages #YQ0=
. And try decode it|*|

|*|21 May 18:8:47|*|<GLOBAL>|*|Receive new messages #YQ0=
. And try decode it|*|

|*|21 May 18:9:4|*|<GLOBAL>|*|Receive new messages $V24=2; 
;
. And try decode it|*|

|*|21 May 18:9:4|*|<GLOBAL>|*|Undefine # in start message $V24=2; 
;
|*|

|*|21 May 18:9:17|*|<GLOBAL>|*|Modem receive command Atd+2#
|*|

|*|21 May 18:9:17|*|<GLOBAL>|*|Command not found and session is started, so modem form empty string answer|*|

|*|21 May 18:9:17|*|<GLOBAL>|*|Form result message: #QXRkKzIjDQo=
|*|

|*|21 May 18:9:21|*|<GLOBAL>|*|Modem receive command 1234|*|

|*|21 May 18:9:21|*|<GLOBAL>|*|Command not found and session is started, so modem form empty string answer|*|

|*|21 May 18:9:21|*|<GLOBAL>|*|Form result message: #MTIzNA==
|*|

|*|21 May 18:9:34|*|<GLOBAL>|*|Modem receive command +++
|*|

|*|21 May 18:9:34|*|<GLOBAL>|*|Close connection, delete client delegate|*|

|*|21 May 18:9:34|*|<GLOBAL>|*|Delete TCP client|*|

